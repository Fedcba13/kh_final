<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="food">
	<select id="selectFoodDivisionList" resultType="foodDivision">
		SELECT *
		FROM FOOD_DIVISION
		ORDER BY FOOD_DIVISION_NAME
	</select>
	<select id="selectFoodUpperList" resultType="foodUpper">
		SELECT *
		FROM FOOD_UPPER
		ORDER BY FOOD_UPPER_NAME
	</select>
	<select id="selectMarketList" resultType="market">
		SELECT *
		FROM MARKET
		WHERE MARKET_ENABLED = 1 AND FLAG = 2
		ORDER BY MARKET_NAME
	</select>
	<select id="selectFoodListByCat" resultType="foodWithStockAndEvent" parameterType="map">
		SELECT F.*, <![CDATA[(SELECT MAX(EVENT_PRICE)
                     FROM EVENT
                     WHERE (EVENT_CATEGORY = F.FOOD_SECTION_NO OR EVENT_CATEGORY IS NULL)
                         AND (MARKET_NO = M.MARKET_NO OR MARKET_NO IS NULL) AND (EVENT_DATE_START < SYSDATE)
                         AND (EVENT_DATE_END > SYSDATE) AND (EVENT_ENABLED = 1))AS EVENT_PERCENT]]>
		FROM FOOD F LEFT JOIN FOOD_SECTION S ON F.FOOD_SECTION_NO = S.FOOD_SECTION_NO
					LEFT JOIN FOOD_UPPER U ON S.FOOD_UPPER_NO = U.FOOD_UPPER_NO
					LEFT JOIN FOOD_DIVISION D ON U.FOOD_DIVISION_NO = D.FOOD_DIVISION_NO
					LEFT JOIN STOCK T ON F.FOOD_NO = T.FOOD_NO
					LEFT JOIN MARKET M ON T.MARKET_NO = M.MARKET_NO 
		<trim prefix="WHERE" suffixOverrides="AND">
			M.MARKET_NO = #{marketNo}
			<![CDATA[AND T.STOCK_AMOUNT > 0]]>
			<if test="FOOD_DIVISION_NO !=null and FOOD_DIVISION_NO !=''">
				AND D.FOOD_DIVISION_NO = #{FOOD_DIVISION_NO}
			</if>
			<if test="FOOD_UPPER_NO !=null and FOOD_UPPER_NO !=''">
				AND U.FOOD_UPPER_NO = #{FOOD_UPPER_NO}
			</if>
			<if test="FOOD_SECTION_NO !=null and FOOD_SECTION_NO !=''">
				AND S.FOOD_SECTION_NO = #{FOOD_SECTION_NO}
			</if>
		</trim>
	</select>
	<select id="selectFoodBySearchKeyword" resultType="foodWithStockAndEvent" parameterType="map">
		SELECT F.*, <![CDATA[(SELECT MAX(EVENT_PRICE)
                     FROM EVENT
                     WHERE (EVENT_CATEGORY = F.FOOD_SECTION_NO OR EVENT_CATEGORY IS NULL)
                         AND (MARKET_NO = M.MARKET_NO OR MARKET_NO IS NULL) AND (EVENT_DATE_START < SYSDATE)
                         AND (EVENT_DATE_END > SYSDATE) AND (EVENT_ENABLED = 1))AS EVENT_PERCENT]]>
		FROM FOOD F LEFT JOIN FOOD_SECTION S ON F.FOOD_SECTION_NO = S.FOOD_SECTION_NO
					LEFT JOIN FOOD_UPPER U ON S.FOOD_UPPER_NO = U.FOOD_UPPER_NO
					LEFT JOIN FOOD_DIVISION D ON U.FOOD_DIVISION_NO = D.FOOD_DIVISION_NO
					LEFT JOIN STOCK T ON F.FOOD_NO = T.FOOD_NO
					LEFT JOIN MARKET M ON T.MARKET_NO = M.MARKET_NO 
		<trim prefix="WHERE" suffixOverrides="AND">
			M.MARKET_NO = #{marketNo} AND F.FOOD_NAME LIKE '%'||#{searchKeyword}||'%'
			<![CDATA[AND T.STOCK_AMOUNT > 0]]>
			<if test="FOOD_DIVISION_NO !=null and FOOD_DIVISION_NO !=''">
				AND D.FOOD_DIVISION_NO = #{FOOD_DIVISION_NO}
			</if>
			<if test="FOOD_UPPER_NO !=null and FOOD_UPPER_NO !=''">
				AND U.FOOD_UPPER_NO = #{FOOD_UPPER_NO}
			</if>
			<if test="FOOD_SECTION_NO !=null and FOOD_SECTION_NO !=''">
				AND S.FOOD_SECTION_NO = #{FOOD_SECTION_NO}
			</if>
		</trim>
	</select>
	<select id="selectNeedToOrderListListByCat" resultType="foodWithStockAndEvent" parameterType="map">
		SELECT *
		FROM FOOD F LEFT JOIN FOOD_SECTION S ON F.FOOD_SECTION_NO = S.FOOD_SECTION_NO
					LEFT JOIN FOOD_UPPER U ON S.FOOD_UPPER_NO = U.FOOD_UPPER_NO
					LEFT JOIN FOOD_DIVISION D ON U.FOOD_DIVISION_NO = D.FOOD_DIVISION_NO
					LEFT JOIN STOCK T ON F.FOOD_NO = T.FOOD_NO
					LEFT JOIN MARKET M ON T.MARKET_NO = M.MARKET_NO 
		<trim prefix="WHERE" suffixOverrides="AND">
			F.FOOD_NO NOT IN (SELECT F.FOOD_NO
								FROM FOOD F LEFT JOIN FOOD_SECTION S ON F.FOOD_SECTION_NO = S.FOOD_SECTION_NO
											LEFT JOIN FOOD_UPPER U ON S.FOOD_UPPER_NO = U.FOOD_UPPER_NO
											LEFT JOIN FOOD_DIVISION D ON U.FOOD_DIVISION_NO = D.FOOD_DIVISION_NO
											LEFT JOIN STOCK T ON F.FOOD_NO = T.FOOD_NO
											LEFT JOIN MARKET M ON T.MARKET_NO = M.MARKET_NO
								<trim prefix="WHERE" suffixOverrides="AND">
									M.MARKET_NO =  #{marketNo}
								<if test="FOOD_DIVISION_NO !=null and FOOD_DIVISION_NO !=''">
									AND D.FOOD_DIVISION_NO = #{FOOD_DIVISION_NO}
								</if>
								<if test="FOOD_UPPER_NO !=null and FOOD_UPPER_NO !=''">
									AND U.FOOD_UPPER_NO = #{FOOD_UPPER_NO}
								</if>
								<if test="FOOD_SECTION_NO !=null and FOOD_SECTION_NO !=''">
									AND S.FOOD_SECTION_NO = #{FOOD_SECTION_NO}
								</if>
							</trim>)
				<!-- (M.MARKET_NO = #{marketNo} AND T.STOCK_AMOUNT = 0) -->
			<if test="FOOD_DIVISION_NO !=null and FOOD_DIVISION_NO !=''">
				AND D.FOOD_DIVISION_NO = #{FOOD_DIVISION_NO}
			</if>
			<if test="FOOD_UPPER_NO !=null and FOOD_UPPER_NO !=''">
				AND U.FOOD_UPPER_NO = #{FOOD_UPPER_NO}
			</if>
			<if test="FOOD_SECTION_NO !=null and FOOD_SECTION_NO !=''">
				AND S.FOOD_SECTION_NO = #{FOOD_SECTION_NO}
			</if>
			<if test="searchKeyword !=null and searchKeyword !=''">
				AND F.FOOD_NAME LIKE '%'||#{searchKeyword}||'%'
			</if>
		</trim>
		
	</select>
	<select id="getSubUpperList" resultType="foodUpper">
		SELECT *
		FROM FOOD_UPPER
		WHERE FOOD_DIVISION_NO = #{searchNo}
		ORDER BY FOOD_UPPER_NAME
	</select>	
	<select id="getSubSectList" resultType="foodSection">
		SELECT *
		FROM FOOD_SECTION
		WHERE FOOD_UPPER_NO = #{searchNo}
		ORDER BY FOOD_SECTION_NAME
	</select>	
	<select id="getUpperNoBySectNo" resultType="string" >
		SELECT FOOD_UPPER_NO
		FROM FOOD_SECTION
		WHERE FOOD_SECTION_NO = #{searchNo}
	</select>
	<select id="selectBrotherSectList" resultType="foodSection">
		SELECT *
		FROM FOOD_SECTION
		WHERE FOOD_UPPER_NO = #{upperNo}
		ORDER BY FOOD_SECTION_NAME
	</select>
	<select id="selectFood" resultType="FoodWithStockAndEvent">
        SELECT  F.*,M.*, <![CDATA[(SELECT MAX(EVENT_PRICE)
                     FROM EVENT
                     WHERE (EVENT_CATEGORY = F.FOOD_SECTION_NO OR EVENT_CATEGORY IS NULL)
                         AND (MARKET_NO = M.MARKET_NO OR MARKET_NO IS NULL) AND (EVENT_DATE_START < SYSDATE)
                         AND (EVENT_DATE_END > SYSDATE) AND (EVENT_ENABLED = 1))AS EVENT_PERCENT]]>
		FROM FOOD F LEFT JOIN STOCK T ON F.FOOD_NO = T.FOOD_NO
					LEFT JOIN MARKET M ON T.MARKET_NO = M.MARKET_NO
                  	LEFT JOIN  (SELECT TARGET_ID, COUNT(GOOD) AS GOOD, COUNT(BAD) AS BAD
                             	FROM GOOD
                             	GROUP BY TARGET_ID) G ON F.FOOD_NO = G.TARGET_ID
		WHERE F.FOOD_NO = #{foodNo} AND M.MARKET_NO = #{marketNo}			
	</select>
	<select id="selectNoStockFood" resultType="FoodWithStockAndEvent">
		SELECT * 
		FROM FOOD
		WHERE FOOD_NO = #{foodNo}
	</select>
	<select id="getFoodSectionList" resultType="foodSection">
		SELECT *
		FROM FOOD_SECTION
		ORDER BY FOOD_SECTION_NAME
	</select>
	<select id="getUpperListToInsertFood" resultType="foodUpper">
		SELECT *
		FROM FOOD_UPPER
		WHERE FOOD_DIVISION_NO = #{foodDivisionNo}
		ORDER BY FOOD_UPPER_NAME
	</select>
	<select id="getSectionListToInsertFood" resultType="foodSection">
		SELECT *
		FROM FOOD_SECTION
		WHERE FOOD_UPPER_NO = #{foodUpperNo}
		ORDER BY FOOD_SECTION_NAME
	</select>
	<insert id="insertFood" parameterType="food">
		INSERT INTO FOOD(FOOD_NO, FOOD_NAME, FOOD_SECTION_NO, FOOD_COMPANY, FOOD_MARKET_PRICE
						, FOOD_MEMBER_PRICE, FOOD_ENABLED, FOOD_ORIGINAL_FILE_NAME, FOOD_RENAMED_FILE_NAME)
		VALUES( 'FOOD'||LPAD(FOOD_SEQ_NO.NEXTVAL, 5, '0')
				, #{foodName}, #{foodSectionNo}, #{foodCompany}
				, #{foodMarketPrice}, #{foodMemberPrice}, DEFAULT
				, #{foodOriginalFileName}, #{foodRenamedFileName})
	</insert>
	<select id="selectFoodInMain1" resultType="FoodWithStockAndEvent">
	<![CDATA[
		SELECT F.*, (SELECT MAX(EVENT_PRICE)
                     FROM EVENT
                     WHERE (EVENT_CATEGORY = F.FOOD_SECTION_NO OR EVENT_CATEGORY IS NULL)
                         AND (MARKET_NO = M.MARKET_NO OR MARKET_NO IS NULL) AND (EVENT_DATE_START < SYSDATE)
                         AND (EVENT_DATE_END > SYSDATE) AND (EVENT_ENABLED = 1))AS EVENT_PERCENT
		FROM FOOD F LEFT JOIN FOOD_SECTION S ON F.FOOD_SECTION_NO = S.FOOD_SECTION_NO
		            LEFT JOIN FOOD_UPPER U ON S.FOOD_UPPER_NO = U.FOOD_UPPER_NO
		            LEFT JOIN FOOD_DIVISION D ON U.FOOD_DIVISION_NO = D.FOOD_DIVISION_NO
		            LEFT JOIN STOCK T ON F.FOOD_NO = T.FOOD_NO
		            LEFT JOIN MARKET M ON T.MARKET_NO = M.MARKET_NO
		            WHERE M.MARKET_NO =  'mar00012' AND ROWNUM <= 4
		            ORDER BY T.STOCK_AMOUNT DESC
	
	]]>
	</select>
	<select id="selectFoodInMain2" resultType="FoodWithStockAndEvent">
	<![CDATA[
		SELECT F.*, (SELECT MAX(EVENT_PRICE)
                     FROM EVENT
                     WHERE (EVENT_CATEGORY = F.FOOD_SECTION_NO OR EVENT_CATEGORY IS NULL)
                         AND (MARKET_NO = M.MARKET_NO OR MARKET_NO IS NULL) AND (EVENT_DATE_START < SYSDATE)
                         AND (EVENT_DATE_END > SYSDATE) AND (EVENT_ENABLED = 1))AS EVENT_PERCENT
		FROM FOOD F LEFT JOIN FOOD_SECTION S ON F.FOOD_SECTION_NO = S.FOOD_SECTION_NO
	            LEFT JOIN FOOD_UPPER U ON S.FOOD_UPPER_NO = U.FOOD_UPPER_NO
	            LEFT JOIN FOOD_DIVISION D ON U.FOOD_DIVISION_NO = D.FOOD_DIVISION_NO
	            LEFT JOIN STOCK T ON F.FOOD_NO = T.FOOD_NO
	            LEFT JOIN MARKET M ON T.MARKET_NO = M.MARKET_NO
                LEFT JOIN (SELECT TARGET_ID, COUNT(GOOD) AS GOOD, COUNT(BAD) AS BAD
                               FROM GOOD
                               GROUP BY TARGET_ID) G ON F.FOOD_NO = G.TARGET_ID
	            WHERE M.MARKET_NO =  'mar00012' AND ROWNUM<=4
	            ORDER BY  (GOOD-BAD) DESC
	]]>
	</select>
	<select id="selectFoodInMain3" resultType="FoodWithStockAndEvent">
	<![CDATA[
		 SELECT F.*, (SELECT MAX(EVENT_PRICE)
                     FROM EVENT
                     WHERE (EVENT_CATEGORY = F.FOOD_SECTION_NO OR EVENT_CATEGORY IS NULL)
                         AND (MARKET_NO = M.MARKET_NO OR MARKET_NO IS NULL) AND (EVENT_DATE_START < SYSDATE)
                         AND (EVENT_DATE_END > SYSDATE) AND (EVENT_ENABLED = 1))AS EVENT_PERCENT
		FROM FOOD F LEFT JOIN FOOD_SECTION S ON F.FOOD_SECTION_NO = S.FOOD_SECTION_NO
	            LEFT JOIN FOOD_UPPER U ON S.FOOD_UPPER_NO = U.FOOD_UPPER_NO
	            LEFT JOIN FOOD_DIVISION D ON U.FOOD_DIVISION_NO = D.FOOD_DIVISION_NO
	            LEFT JOIN STOCK T ON F.FOOD_NO = T.FOOD_NO
	            LEFT JOIN MARKET M ON T.MARKET_NO = M.MARKET_NO
                LEFT JOIN (SELECT TARGET_ID, COUNT(GOOD) AS GOOD, COUNT(BAD) AS BAD
                               FROM GOOD
                               GROUP BY TARGET_ID) G ON F.FOOD_NO = G.TARGET_ID
	            WHERE M.MARKET_NO =  'mar00012' AND D.FOOD_DIVISION_NO = #{foodDivisionNo} AND ROWNUM<=4
	            ORDER BY  (GOOD-BAD) DESC
	]]>
	</select>
	<select id="selectFoodInMain4" resultType="FoodWithStockAndEvent">
	<![CDATA[
		SELECT F.*, (SELECT MAX(EVENT_PRICE)
                     FROM EVENT
                     WHERE (EVENT_CATEGORY = F.FOOD_SECTION_NO OR EVENT_CATEGORY IS NULL)
                         AND (MARKET_NO = M.MARKET_NO OR MARKET_NO IS NULL) AND (EVENT_DATE_START < SYSDATE)
                         AND (EVENT_DATE_END > SYSDATE) AND (EVENT_ENABLED = 1))AS EVENT_PERCENT
			FROM FOOD F LEFT JOIN FOOD_SECTION S ON F.FOOD_SECTION_NO = S.FOOD_SECTION_NO
	            LEFT JOIN FOOD_UPPER U ON S.FOOD_UPPER_NO = U.FOOD_UPPER_NO
	            LEFT JOIN FOOD_DIVISION D ON U.FOOD_DIVISION_NO = D.FOOD_DIVISION_NO
	            LEFT JOIN STOCK T ON F.FOOD_NO = T.FOOD_NO
	            LEFT JOIN MARKET M ON T.MARKET_NO = M.MARKET_NO
	            LEFT JOIN EVENT E ON S.FOOD_SECTION_NO = E.EVENT_CATEGORY
	            WHERE ((E.MARKET_NO = 'mar00012' AND  E.EVENT_CATEGORY IS NULL) 
                        OR (E.MARKET_NO IS NULL AND E.EVENT_CATEGORY IS NULL)
                        OR (E.MARKET_NO = 'mar00012' AND E.EVENT_CATEGORY IS NOT NULL))
                        AND E.EVENT_DATE_START < SYSDATE AND E.EVENT_DATE_END > SYSDATE
                        AND T.STOCK_AMOUNT > 0  AND (EVENT_ENABLED = 1) AND ROWNUM<=4
	            ORDER BY E.EVENT_PRICE DESC
		]]>
	</select>
	<select id="selectNewFoodList" resultType="FoodWithStockAndEvent">
		SELECT  F.*, <![CDATA[(SELECT MAX(EVENT_PRICE)
                     FROM EVENT
                     WHERE (EVENT_CATEGORY = F.FOOD_SECTION_NO OR EVENT_CATEGORY IS NULL)
                         AND (MARKET_NO = M.MARKET_NO OR MARKET_NO IS NULL) AND (EVENT_DATE_START < SYSDATE)
                         AND (EVENT_DATE_END > SYSDATE) AND (EVENT_ENABLED = 1))AS EVENT_PERCENT]]>
		FROM FOOD F LEFT JOIN FOOD_SECTION S ON F.FOOD_SECTION_NO = S.FOOD_SECTION_NO
					LEFT JOIN FOOD_UPPER U ON S.FOOD_UPPER_NO = U.FOOD_UPPER_NO
					LEFT JOIN FOOD_DIVISION D ON U.FOOD_DIVISION_NO = D.FOOD_DIVISION_NO
					LEFT JOIN STOCK T ON F.FOOD_NO = T.FOOD_NO
					LEFT JOIN MARKET M ON T.MARKET_NO = M.MARKET_NO 
		WHERE	M.MARKET_NO = #{marketNo} 
				AND M.MARKET_ENABLED = 1 AND FLAG = 2
			<![CDATA[AND T.STOCK_AMOUNT > 0]]>
		ORDER BY F.FOOD_NO DESC
	</select>
	<select id="selectBestFoodList" resultType="FoodWithStockAndEvent">
		SELECT F.*, (SELECT MAX(EVENT_PRICE)
                     FROM EVENT
                    <![CDATA[ WHERE (EVENT_CATEGORY = F.FOOD_SECTION_NO OR EVENT_CATEGORY IS NULL)
                         AND (MARKET_NO = M.MARKET_NO OR MARKET_NO IS NULL) AND (EVENT_DATE_START < SYSDATE)
                         AND (EVENT_DATE_END > SYSDATE) AND (EVENT_ENABLED = 1))AS EVENT_PERCENT
		FROM FOOD F LEFT JOIN FOOD_SECTION S ON F.FOOD_SECTION_NO = S.FOOD_SECTION_NO]]>
	            LEFT JOIN FOOD_UPPER U ON S.FOOD_UPPER_NO = U.FOOD_UPPER_NO
	            LEFT JOIN FOOD_DIVISION D ON U.FOOD_DIVISION_NO = D.FOOD_DIVISION_NO
	            LEFT JOIN STOCK T ON F.FOOD_NO = T.FOOD_NO
	            LEFT JOIN MARKET M ON T.MARKET_NO = M.MARKET_NO
                LEFT JOIN (SELECT TARGET_ID, COUNT(GOOD) AS GOOD, COUNT(BAD) AS BAD
                               FROM GOOD
                               GROUP BY TARGET_ID) G ON F.FOOD_NO = G.TARGET_ID
	            WHERE M.MARKET_NO =  #{marketNo} AND D.FOOD_DIVISION_NAME
	            <choose>
		            <when test="foodDivisionName !=null and foodDivisionName.equals('all')" >
			            like '%'
		            </when>
		            <otherwise>
			            = #{foodDivisionName} 
		            </otherwise>
	            </choose> 
	           <![CDATA[ AND T.STOCK_AMOUNT > 0 
	            ORDER BY  (GOOD-BAD) DESC
	]]>
	</select>
	<select id="selectRelatedRecipe" resultType="relatedRecipe">
		<![CDATA[
		select distinct(recipe_no), recipe_title, renamed_recipe_pic 
from( select ra.*, food_no, ri.food_section_no 
        from (select r.recipe_no, r.recipe_title, rs.renamed_recipe_pic 
                from (select *
                            from recipe
                            where recipe_enabled = 1) r
       left join recipe_sequence rs
           on r.recipe_no = rs.recipe_no
   where (rs.recipe_no, rs.recipe_order) in ( select recipe_no, max(recipe_order) as recipe_order from recipe_sequence group by recipe_no) ) ra
   left join recipe_ingredient ri
       on ra.recipe_no = ri.recipe_no)
   where food_no = #{foodNo}
           or (food_no = null and food_section_no = #{foodSectionNo})
		]]>
	</select> 
	<select id="selectGoodOne" resultType="good">
		<choose>
			<when test="memberId !=null and memberId == 'all'">
				SELECT COUNT(GOOD) TOTAL_GOOD, COUNT(BAD) TOTAL_BAD
				FROM GOOD
				WHERE TARGET_ID = #{foodNo}
			</when>
			<otherwise>
				SELECT G.*, (SELECT  COUNT(GOOD) GTOTAL
							FROM GOOD
							WHERE TARGET_ID = #{foodNo}
							GROUP BY TARGET_ID )AS TOTAL_GOOD
							,(SELECT  COUNT(BAD) BTOTAL
							FROM GOOD
							WHERE TARGET_ID = #{foodNo}
							GROUP BY TARGET_ID) AS TOTAL_BAD
				FROM GOOD G
				WHERE MEMBER_ID = #{memberId} AND TARGET_ID = #{foodNo}
			</otherwise>
		</choose>
	</select>
	<update id="cancelGood">
		UPDATE GOOD
        SET GOOD = NULL, BAD = NULL 
        WHERE MEMBER_ID = #{memberId} AND TARGET_ID = #{foodNo} 
	</update>
	<update id="changeGood" >
		UPDATE GOOD
	    SET 
	    	GOOD = CASE
	    	WHEN GOOD IS NULL THEN 1
	    	WHEN GOOD = 1 THEN NULL END
	    	,BAD = CASE
	   		WHEN BAD IS NULL THEN 1
	    	WHEN BAD = 1 THEN NULL END
	    WHERE MEMBER_ID = #{memberId}  AND TARGET_ID = #{foodNo}
	</update>
	<update id="updateGood">
		UPDATE GOOD
        SET ${column} = 1
        WHERE MEMBER_ID = #{memberId} AND TARGET_ID = #{foodNo} 
	</update>
	<insert id="insertGood" >
		INSERT INTO GOOD(TARGERT_ID, MAMEBER_ID, GOOD, BAD)
		VALUES(#{foodNo}, #{memberId}, 
		
		<if test="column !=null and column.equals('GOOD')">
			1, NULL
		</if>
		<if test="column !=null and column.equals('BAD')">
			NULL, 1
		</if>
		  )
	</insert>
	<select id="selectGoodTotal" resultType="good">
		SELECT  TARGET_ID, COUNT(GOOD) GOOD, COUNT(BAD) BAD
		FROM GOOD
		WHERE TARGET_ID = #{foodNo}
		GROUP BY TARGET_ID
	</select>
	<select id="selectSaleFoodList" resultType="FoodWithStockAndEvent">
		<![CDATA[SELECT F.*, (SELECT MAX(EVENT_PRICE)
                  			   FROM EVENT
                   			  WHERE (EVENT_CATEGORY = F.FOOD_SECTION_NO OR EVENT_CATEGORY IS NULL)
                        		 AND (MARKET_NO = M.MARKET_NO OR MARKET_NO IS NULL) AND (EVENT_DATE_START < SYSDATE)
                         		AND (EVENT_DATE_END > SYSDATE) AND (EVENT_ENABLED = 1))AS EVENT_PERCENT
			FROM FOOD F LEFT JOIN FOOD_SECTION S ON F.FOOD_SECTION_NO = S.FOOD_SECTION_NO
	            LEFT JOIN FOOD_UPPER U ON S.FOOD_UPPER_NO = U.FOOD_UPPER_NO
	            LEFT JOIN FOOD_DIVISION D ON U.FOOD_DIVISION_NO = D.FOOD_DIVISION_NO
	            LEFT JOIN STOCK T ON F.FOOD_NO = T.FOOD_NO
	            LEFT JOIN MARKET M ON T.MARKET_NO = M.MARKET_NO
	            LEFT JOIN EVENT E ON S.FOOD_SECTION_NO = E.EVENT_CATEGORY
	              WHERE ((E.MARKET_NO = #{marketNo} AND  E.EVENT_CATEGORY IS NULL) 
                        OR (E.MARKET_NO IS NULL AND E.EVENT_CATEGORY IS NULL)
                        OR (E.MARKET_NO = #{marketNo} AND E.EVENT_CATEGORY IS NOT NULL))
                        AND E.EVENT_DATE_START < SYSDATE AND E.EVENT_DATE_END > SYSDATE
                        AND T.STOCK_AMOUNT > 0 AND (EVENT_ENABLED = 1)
	            ORDER BY E.EVENT_PRICE DESC]]>
	</select>
	<select id="getmarket" resultType="market">
		SELECT *
		FROM MARKET
		WHERE MARKET_NO = #{marketNo}
	</select>
</mapper>